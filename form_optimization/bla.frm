S U, F, s, t, eps;
AutoDeclare S z;
AutoDeclare CF V;


L foo = + ((( + (U**2)) * ( + (-2)) * (V( + (0)))) + ( + (2*F*z4)) + ( + (2*F*z5)) + ( + (2*F*z6)) + ( + (2*F*z7)) + ( + (-2*t*z4**2*z7**2)) + ( + (2*U*t*z2*z4)) + ( + (2*U*t*z2*z5)) + ( + (2*U*t*z2*z6)) + ( + (2*U*t*z2*z7)) + ( + (2*U*s*z3*z4 + 2*U*t*z3*z4)) + ( + (2*U*s*z3*z5 + 2*U*t*z3*z5)) + ( + (2*U*s*z3*z6 + 2*U*t*z3*z6)) + ( + (2*U*s*z3*z7 + 2*U*t*z3*z7)) + ( + (2*U*t*z4*z5)) + ( + (2*U*s*z4*z6 + 2*U*t*z4*z6)) + ( + (2*U*t*z4*z7)) + ( + (2*s*z2*z3*z4**2)) + ( + (2*s*z2*z3*z5**2)) + ( + (2*s*z2*z3*z6**2)) + ( + (2*s*z2*z3*z7**2)) + ( + (2*s*z2*z4*z6**2)) + ( + (-2*t*z2*z4*z7**2)) + ( + (2*s*z2*z4**2*z6)) + ( + (-2*t*z2*z4**2*z7)) + ( + (2*s*z3*z4*z5**2)) + ( + (-2*t*z3*z4*z7**2)) + ( + (2*s*z3*z4**2*z5)) + ( + (-2*t*z3*z4**2*z7)) + ( + (2*s*z4**2*z5*z6)) + ( + (-2*t*z4**2*z5*z7)) + ( + (-2*t*z4**2*z6*z7)) + ( + (4*s*z2*z3*z4*z5)) + ( + (4*s*z2*z3*z4*z6)) + ( + (4*s*z2*z3*z4*z7)) + ( + (4*s*z2*z3*z5*z6)) + ( + (4*s*z2*z3*z5*z7)) + ( + (4*s*z2*z3*z6*z7)) + ( + (2*s*z2*z4*z5*z6)) + ( + (-2*t*z2*z4*z5*z7)) + ( + (2*s*z2*z4*z6*z7 - 2*t*z2*z4*z6*z7)) + ( + (2*s*z3*z4*z5*z6)) + ( + (2*s*z3*z4*z5*z7 - 2*t*z3*z4*z5*z7)) + ( + (-2*t*z3*z4*z6*z7))) + ((( + (U**2)) * ((( + (-2)) * (V_d0( + (0)))) + (( + (-2)) * (V( + (0)))))) + ( + (-F*z4)) + ( + (-F*z5)) + ( + (-F*z6)) + ( + (-F*z7)) + ( + (-2*t*z4**2*z7**2)) + ( + (2*U*t*z2*z4)) + ( + (2*U*t*z2*z5)) + ( + (2*U*t*z2*z6)) + ( + (2*U*t*z2*z7)) + ( + (2*U*s*z3*z4 + 2*U*t*z3*z4)) + ( + (2*U*s*z3*z5 + 2*U*t*z3*z5)) + ( + (2*U*s*z3*z6 + 2*U*t*z3*z6)) + ( + (2*U*s*z3*z7 + 2*U*t*z3*z7)) + ( + (2*U*t*z4*z5)) + ( + (2*U*s*z4*z6 + 2*U*t*z4*z6)) + ( + (2*U*t*z4*z7)) + ( + (2*s*z2*z3*z4**2)) + ( + (2*s*z2*z3*z5**2)) + ( + (2*s*z2*z3*z6**2)) + ( + (2*s*z2*z3*z7**2)) + ( + (2*s*z2*z4*z6**2)) + ( + (-2*t*z2*z4*z7**2)) + ( + (2*s*z2*z4**2*z6)) + ( + (-2*t*z2*z4**2*z7)) + ( + (2*s*z3*z4*z5**2)) + ( + (-2*t*z3*z4*z7**2)) + ( + (2*s*z3*z4**2*z5)) + ( + (-2*t*z3*z4**2*z7)) + ( + (2*s*z4**2*z5*z6)) + ( + (-2*t*z4**2*z5*z7)) + ( + (-2*t*z4**2*z6*z7)) + ( + (4*s*z2*z3*z4*z5)) + ( + (4*s*z2*z3*z4*z6)) + ( + (4*s*z2*z3*z4*z7)) + ( + (4*s*z2*z3*z5*z6)) + ( + (4*s*z2*z3*z5*z7)) + ( + (4*s*z2*z3*z6*z7)) + ( + (2*s*z2*z4*z5*z6)) + ( + (-2*t*z2*z4*z5*z7)) + ( + (2*s*z2*z4*z6*z7 - 2*t*z2*z4*z6*z7)) + ( + (2*s*z3*z4*z5*z6)) + ( + (2*s*z3*z4*z5*z7 - 2*t*z3*z4*z5*z7)) + ( + (-2*t*z3*z4*z6*z7)))*eps + (( + (U**2)) * ((( + (-2)) * (V_d0_d0( + (0)))) + (( + (-2)) * (V_d0( + (0)))) + (( + (-2)) * (V_d0( + (0))))))*eps**2 + (( + (U**2)) * ((( + (-2)) * (V_d0_d0_d0( + (0)))) + (( + (-2)) * (V_d0_d0( + (0)))) + (( + (-2)) * (V_d0_d0( + (0)))) + (( + (-2)) * (V_d0_d0( + (0))))))*eps**3 + (( + (U**2)) * ((( + (-2)) * (V_d0_d0_d0_d0( + (0)))) + (( + (-2)) * (V_d0_d0_d0( + (0)))) + (( + (-2)) * (V_d0_d0_d0( + (0)))) + (( + (-2)) * (V_d0_d0_d0( + (0)))) + (( + (-2)) * (V_d0_d0_d0( + (0))))))*eps**4;

print;
.sort

Format O2;

#optimize foo


#write<abbrev> "%O"
#write<expr> "%e" foo

.end
